#!/usr/bin/env node

const http = require('http');
const Express = require('express');
const BodyParser = require('body-parser');
const expressLogger = require('express-pino-logger')()

const urlencoded = BodyParser.urlencoded({
  extended: false,
});

// init application
const app = Express();
app.use(Express.static('public'));
app.use(expressLogger);
app.use(urlencoded);
// app.use(Express.static(path.join(__dirname, 'public')));

const port = normalizePort(process.env.PORT || '8081');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);http://meirim.org/
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Listening on ' + bind);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}